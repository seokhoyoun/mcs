@page "/production/cassettes"
@using MudBlazor
@using MudBlazor.Components
@using Nexus.Core.Domain.Models.Locations.Base
@using Nexus.Core.Domain.Models.Locations.Interfaces
@using Nexus.Core.Domain.Models.Locations.Enums
@using Nexus.Core.Domain.Models.Transports
@using Nexus.Core.Domain.Models.Transports.Interfaces
@using Nexus.Shared.Application.DTO
@using Nexus.Core.Domain.Models.Locations
@using Nexus.Core.Domain.Models.Locations.Services
@using Microsoft.AspNetCore.Components.Web
@inject ITransportRepository TransportRepository
@inject ILocationRepository LocationRepository
@inject IDialogService DialogService

<MudPaper Class="pa-4">

    <MudDataGrid T="CassetteGridItem"
                 Class="text-caption"
                 Items="_gridItems"
                 Dense="true"
                 Hover="true"
                 Bordered="true"
                 Striped="true"
                 Filterable="true"
                 SortMode="SortMode.Multiple"
                 QuickFilter="@QuickFilter"
                 Hideable="true"
                 RowsPerPage="25"
                 Virtualize="true"
                 Groupable="true">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Cassettes</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Search..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mx-2" />
        </ToolBarContent>

        <Columns>
            <TemplateColumn Title="TYPE" Sortable="true">
                <CellTemplate>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@GetTypeIcon(context.Item.Type)"
                                 Color="@GetTypeColor(context.Item.Type)"
                                 Size="Size.Small"
                                 Class="mr-2" />
                        <MudText Color="@GetTypeColor(context.Item.Type)">
                            @context.Item.Type
                        </MudText>
                    </div>
                </CellTemplate>
            </TemplateColumn>
			<PropertyColumn Property="x => x.Id" Title="ID" Sortable="true" />
            <PropertyColumn Property="x => x.Parent" Title="PARENT" Sortable="true" />
            <PropertyColumn Property="x => x.DeviceId" Title="DEVICE ID" Sortable="true" />
            <TemplateColumn Title="LOCATION ID" Sortable="true">
                <CellTemplate>
                    <div @oncontextmenu:preventDefault
                         @oncontextmenu="@((MouseEventArgs e) => OnRowContextMenu(e, context.Item))"
                         style="min-height: 20px; width: 100%; padding: 4px; cursor: pointer; background: transparent; ">
                        @context.Item.LocationId
                    </div>
                </CellTemplate>
            </TemplateColumn>
           
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>

</MudPaper>

@code {
    private List<CassetteGridItem> _gridItems = new();
    private string _searchString = string.Empty;
    private CassetteGridItem? _selectedItem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _gridItems.Clear();

            Dictionary<string, Location> locationMap = new();
            IReadOnlyList<Location> locations = await LocationRepository.GetAllAsync();
            foreach (var location in locations)
            {
                if (!string.IsNullOrEmpty(location.CurrentItemId))
                {
                    locationMap[location.CurrentItemId] = location;
                }
            }

            IReadOnlyList<Cassette> cassettes = await TransportRepository.GetCassettesWithoutTraysAsync();
            foreach (Cassette cassette in cassettes)
            {
                string locationId = string.Empty;
                if (locationMap.ContainsKey(cassette.Id))
                {
                    locationId = locationMap[cassette.Id].Id;
                }

                CassetteGridItem cassetteItem = new CassetteGridItem
                {
                    Type = "Cassette",
                    Id = cassette.Id,
                    DeviceId = string.Empty,
                    LocationId = locationId
                };
                _gridItems.Add(cassetteItem);

                IReadOnlyList<Tray> trays = await TransportRepository.GetTraysWithoutMemoriesAsync(cassette.Id);
                foreach (Tray tray in trays)
                {
                    string trayLocationId = string.Empty;
                    if (locationMap.ContainsKey(tray.Id))
                    {
                        trayLocationId = locationMap[tray.Id].Id;
                    }

                    CassetteGridItem trayItem = new CassetteGridItem
                    {
                        Type = "Tray",
                        Id = tray.Id,
                        Parent = cassette.Id,
                        DeviceId = string.Empty,
                        LocationId = trayLocationId
                    };
                    _gridItems.Add(trayItem);

                    IReadOnlyList<Memory> memories = await TransportRepository.GetMemoriesAsync(tray.Id);
                    foreach (var memory in memories)
                    {
                        string memoryLocationId = string.Empty;
                        if (locationMap.ContainsKey(tray.Id))
                        {
                            memoryLocationId = locationMap[memory.Id].Id;
                        }
                        CassetteGridItem memoryItem = new CassetteGridItem
                        {
                            Type = "Memory",
                            Id = memory.Id,
                            Parent = tray.Id,
                            DeviceId = memory.DeviceId,
                            LocationId = memoryLocationId
                        };
                        _gridItems.Add(memoryItem);
                    }
                }
            }

            StateHasChanged();
        }
    }

    private Func<CassetteGridItem, bool> QuickFilter
    {
        get
        {
            return item =>
            {
                if (string.IsNullOrWhiteSpace(_searchString))
                    return true;

                string s = _searchString;

                if (!string.IsNullOrWhiteSpace(item.Type) && item.Type.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (!string.IsNullOrWhiteSpace(item.LocationId) && item.LocationId.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (!string.IsNullOrWhiteSpace(item.Id) && item.Id.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (!string.IsNullOrWhiteSpace(item.DeviceId) && item.DeviceId.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                return false;
            };
        }
    }

    private Color GetTypeColor(string type)
    {
        Color color = Color.Default;

        switch (type)
        {
            case "Cassette":
                color = Color.Primary;
                break;
            case "Tray":
                color = Color.Secondary;
                break;
            case "Memory":
                color = Color.Success;
                break;
            default:
                color = Color.Default;
                break;
        }

        return color;
    }

    private string GetTypeIcon(string type)
    {
        return type switch
        {
            "Cassette" => Icons.Material.Filled.Inbox,
            "Tray" => Icons.Material.Filled.TableRows,
            "Memory" => Icons.Material.Filled.Memory,
            _ => Icons.Material.Filled.Circle
        };
    }

    private async void OnRowContextMenu(MouseEventArgs e, CassetteGridItem item)
    {
        _selectedItem = item;
        await OpenChangeLocationDialog();
    }

    private async Task OpenChangeLocationDialog()
    {
        if (_selectedItem == null)
        {
            return;
        }

        ELocationType locationType = ELocationType.Cassette;
        if (_selectedItem.Type == "Cassette")
        {
            locationType = ELocationType.Cassette;
        }
        else if (_selectedItem.Type == "Tray")
        {
            locationType = ELocationType.Tray;
        }
        else if (_selectedItem.Type == "Memory")
        {
            locationType = ELocationType.Memory;
        }

        IReadOnlyList<Location> locations = await LocationRepository.GetLocationsByTypeAsync(locationType);
        List<string> locationIds = new List<string>();
        foreach (Location loc in locations)
        {
            if (!string.IsNullOrEmpty(loc.CurrentItemId))
            {
                continue;
            }
            locationIds.Add(loc.Id);
        }

        DialogParameters parameters = new DialogParameters
        {
            { "Title", "위치 선택" },
            { "Locations", locationIds },
            { "CurrentLocationId", _selectedItem.LocationId }
        };

        DialogOptions options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        IDialogReference dialog = await DialogService.ShowAsync<Nexus.Portal.Components.Dialogs.SelectLocationDialog>("위치 변경", parameters, options);
        DialogResult? result = await dialog.Result;
        if (result == null)
        {
            return;
        }

        if (!result.Canceled)
        {
            string? newLocationId = result.Data as string;
            if (newLocationId != null)
            {
                await ApplyLocationChangeAsync(_selectedItem, newLocationId);
            }
        }
    }

    private async Task ApplyLocationChangeAsync(CassetteGridItem item, string newLocationId)
    {
        if (!string.IsNullOrEmpty(item.LocationId))
        {
            Location? oldLoc = await LocationRepository.GetByIdAsync(item.LocationId);
            if (oldLoc != null)
            {
                oldLoc.CurrentItemId = string.Empty;
                await LocationRepository.UpdateAsync(oldLoc);
            }
        }

        Location? newLoc = await LocationRepository.GetByIdAsync(newLocationId);
        if (newLoc != null)
        {
            newLoc.CurrentItemId = item.Id;
            await LocationRepository.UpdateAsync(newLoc);
            item.LocationId = newLocationId;
            StateHasChanged();
        }
    }
}
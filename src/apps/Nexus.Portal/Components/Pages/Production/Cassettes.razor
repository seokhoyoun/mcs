@page "/production/cassettes"
@using System.Diagnostics
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using MudBlazor.Components
@using Nexus.Core.Domain.Models.Locations
@using Nexus.Core.Domain.Models.Locations.Base
@using Nexus.Core.Domain.Models.Locations.Enums
@using Nexus.Core.Domain.Models.Locations.Interfaces
@using Nexus.Core.Domain.Models.Locations.Services
@using Nexus.Core.Domain.Models.Transports
@using Nexus.Core.Domain.Models.Transports.DTO
@using Nexus.Core.Domain.Models.Transports.Interfaces
@inject ITransportRepository TransportRepository
@inject ILocationRepository LocationRepository
@inject IDialogService DialogService
@inject ILogger<Cassettes> Logger

<MudPaper Class="pa-4">
    @if (_isLoading)
    {
        <div class="d-flex justify-center align-center" style="height: 600px;">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            <MudText Class="ml-2">데이터 로딩 중...</MudText>
        </div>
    }
    else
    {
        <MudDataGrid T="CassetteGridItem"
                 Class="text-caption"
                 Items="_gridItems"
                 @bind-SelectedItems="_selectedItems"
                 Dense="true"
                 Hover="true"
                 Bordered="true"
                 Striped="true"
                 Filterable="true"
                 SortMode="SortMode.Multiple"
                 MultiSelection="true"
                 QuickFilter="@QuickFilter"
                 Hideable="true"
                 RowsPerPage="25"
                 Virtualize="true"
                 Groupable="true">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Cassettes</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Search..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mx-2" />
                <MudButton StartIcon="@Icons.Material.Filled.Clear"
                           Color="Color.Default"
                           Variant="Variant.Outlined"
                           OnClick="@OnClearLocations"
                           Disabled="@(_selectedItems?.Count == 0)">
                    Clear Locations (@(_selectedItems?.Count ?? 0))
                </MudButton>
        </ToolBarContent>

        <Columns>
            <SelectColumn></SelectColumn>
            <TemplateColumn Title="TYPE" Sortable="true">
                <CellTemplate>
                    <div class="d-flex align-center">
                        <MudIcon Icon="@GetTypeIcon(context.Item.Type)"
                                 Color="@GetTypeColor(context.Item.Type)"
                                 Size="Size.Small"
                                 Class="mr-2" />
                        <MudText Color="@GetTypeColor(context.Item.Type)">
                            @context.Item.Type
                        </MudText>
                    </div>
                </CellTemplate>
            </TemplateColumn>
			<PropertyColumn Property="x => x.Id" Title="ID" Sortable="true" />
            <PropertyColumn Property="x => x.Parent" Title="PARENT" Sortable="true" />
            <PropertyColumn Property="x => x.DeviceId" Title="DEVICE ID" Sortable="true" />
            <TemplateColumn Title="LOCATION ID" Sortable="true">
                <CellTemplate>
                    <div @oncontextmenu:preventDefault
                         @oncontextmenu="@((MouseEventArgs e) => OnRowContextMenu(e, context.Item))"
                         style="min-height: 20px; width: 100%; padding: 4px; cursor: pointer; background: transparent; ">
                        @context.Item.LocationId
                    </div>
                </CellTemplate>
            </TemplateColumn>
           
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
    }

</MudPaper>

@code {
    private bool _isLoading = true; // 로딩 상태 변수 추가

    private string _searchString = string.Empty;
    private List<TransportDto> _gridItems = new();
    private HashSet<TransportDto> _selectedItems = new();
    private TransportDto? _selectedItem;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Stopwatch stopwatch = Stopwatch.StartNew();

            _gridItems.Clear();

            try
            {
                // 병렬로 데이터 로드
                Task<IReadOnlyList<Location>> locationTask = LocationRepository.GetAllAsync();
                Task<CassetteHierarchyDto> hierarchyTask = TransportRepository.GetCassetteHierarchyAsync();

                await Task.WhenAll(locationTask, hierarchyTask);

                IReadOnlyList<Location> locations = await locationTask;
                CassetteHierarchyDto hierarchy = await hierarchyTask;

                // 위치 맵 생성 최적화
                Dictionary<string, Location> locationMap = locations
                    .Where(location => !string.IsNullOrEmpty(location.CurrentItemId))
                    .ToDictionary(location => location.CurrentItemId, location => location);

                // 계층 구조 데이터를 평면화하여 그리드 아이템 생성
                foreach (Cassette cassette in hierarchy.Cassettes)
                {
                    // Cassette 아이템 추가
                    string cassetteLocationId = string.Empty;
                    if (locationMap.TryGetValue(cassette.Id, out Location? cassetteLocation))
                    {
                        cassetteLocationId = cassetteLocation.Id;
                    }

                    TransportDto cassetteItem = new TransportDto
                    {
                        Type = "Cassette",
                        Id = cassette.Id,
                        DeviceId = string.Empty,
                        LocationId = cassetteLocationId
                    };
                    _gridItems.Add(cassetteItem);

                    // 해당 Cassette의 Tray들 처리
                    if (hierarchy.CassetteTrays.TryGetValue(cassette.Id, out IReadOnlyList<Tray>? trays))
                    {
                        foreach (Tray tray in trays)
                        {
                            string trayLocationId = string.Empty;
                            if (locationMap.TryGetValue(tray.Id, out Location? trayLocation))
                            {
                                trayLocationId = trayLocation.Id;
                            }

                            TransportDto trayItem = new TransportDto
                            {
                                Type = "Tray",
                                Id = tray.Id,
                                Parent = cassette.Id,
                                DeviceId = string.Empty,
                                LocationId = trayLocationId
                            };
                            _gridItems.Add(trayItem);

                            // 해당 Tray의 Memory들 처리
                            if (hierarchy.TrayMemories.TryGetValue(tray.Id, out IReadOnlyList<Memory>? memories))
                            {
                                foreach (Memory memory in memories)
                                {
                                    string memoryLocationId = string.Empty;
                                    if (locationMap.TryGetValue(memory.Id, out Location? memoryLocation))
                                    {
                                        memoryLocationId = memoryLocation.Id;
                                    }

                                    TransportDto memoryItem = new TransportDto
                                    {
                                        Type = "Memory",
                                        Id = memory.Id,
                                        Parent = tray.Id,
                                        DeviceId = memory.DeviceId,
                                        LocationId = memoryLocationId
                                    };
                                    _gridItems.Add(memoryItem);
                                }
                            }
                        }
                    }
                }

                stopwatch.Stop();
                Logger.LogInformation($"UI 데이터 로딩 완료: {stopwatch.ElapsedMilliseconds}ms, 총 {_gridItems.Count}개 아이템");
            }
            catch (Exception ex)
            {
                Logger.LogError($"데이터 로딩 중 오류: {ex.Message}");
            }
            finally
            {
                _isLoading = false;
                StateHasChanged();
            }
        }
    }

    private Func<TransportDto, bool> QuickFilter
    {
        get
        {
            return item =>
            {
                if (string.IsNullOrWhiteSpace(_searchString))
                    return true;

                string s = _searchString;

                if (!string.IsNullOrWhiteSpace(item.Type) && item.Type.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (!string.IsNullOrWhiteSpace(item.LocationId) && item.LocationId.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (!string.IsNullOrWhiteSpace(item.Id) && item.Id.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (!string.IsNullOrWhiteSpace(item.DeviceId) && item.DeviceId.Contains(s, StringComparison.OrdinalIgnoreCase))
                    return true;

                return false;
            };
        }
    }

    private Color GetTypeColor(string type)
    {
        Color color = Color.Default;

        switch (type)
        {
            case "Cassette":
                color = Color.Primary;
                break;
            case "Tray":
                color = Color.Secondary;
                break;
            case "Memory":
                color = Color.Success;
                break;
            default:
                color = Color.Default;
                break;
        }

        return color;
    }

    private string GetTypeIcon(string type)
    {
		string icon = string.Empty;

        switch (type)
        {
            case "Cassette":
                icon = Icons.Material.Filled.Inbox;
                break;
            case "Tray":
                icon = Icons.Material.Filled.TableRows;
                break;
            case "Memory":
                icon = Icons.Material.Filled.Memory;
                break;
            default:
                icon = Icons.Material.Filled.Circle;
                break;
        }

		return icon;
    }

    private async void OnRowContextMenu(MouseEventArgs e, TransportDto item)
    {
        _selectedItem = item;
        await OpenChangeLocationDialog();
    }

    private async void OnClearLocations()
    {
        if (_selectedItems == null || _selectedItems.Count == 0)
        {
            return;
        }

        try
        {
            foreach (var selectedItem in _selectedItems.ToList())
            {
                if (string.IsNullOrEmpty(selectedItem.LocationId))
                {
                    continue;
				}

				Location? oldLocation = await LocationRepository.GetByIdAsync(selectedItem.LocationId);
				if (oldLocation != null)
				{
					oldLocation.CurrentItemId = string.Empty;
					await LocationRepository.UpdateAsync(oldLocation);
				}

				selectedItem.LocationId = string.Empty;
            }

            _selectedItems.Clear();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.Assert(false, $"위치 정보 지우기 중 오류 발생: {ex.Message}");
        }
    }

    private async Task OpenChangeLocationDialog()
    {
        if (_selectedItem == null)
        {
            return;
        }

        ELocationType locationType = ELocationType.Cassette;
        if (_selectedItem.Type == "Cassette")
        {
            locationType = ELocationType.Cassette;
        }
        else if (_selectedItem.Type == "Tray")
        {
            locationType = ELocationType.Tray;
        }
        else if (_selectedItem.Type == "Memory")
        {
            locationType = ELocationType.Memory;
        }

        IReadOnlyList<Location> locations = await LocationRepository.GetLocationsByTypeAsync(locationType);
        List<string> locationIds = new List<string>();
        foreach (Location loc in locations)
        {
            if (!string.IsNullOrEmpty(loc.CurrentItemId))
            {
                continue;
            }
            locationIds.Add(loc.Id);
        }

        DialogParameters parameters = new DialogParameters
        {
            { "Title", "위치 선택" },
            { "Locations", locationIds },
            { "CurrentLocationId", _selectedItem.LocationId }
        };

        DialogOptions options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        IDialogReference dialog = await DialogService.ShowAsync<Nexus.Portal.Components.Dialogs.SelectLocationDialog>("위치 변경", parameters, options);
        DialogResult? result = await dialog.Result;
        if (result == null)
        {
            return;
        }

        if (!result.Canceled)
        {
            string? newLocationId = result.Data as string;
            if (newLocationId != null)
            {
                await ApplyLocationChangeAsync(_selectedItem, newLocationId);
            }
        }
    }

    private async Task ApplyLocationChangeAsync(TransportDto item, string newLocationId)
    {
        if (!string.IsNullOrEmpty(item.LocationId))
        {
            Location? oldLoc = await LocationRepository.GetByIdAsync(item.LocationId);
            if (oldLoc != null)
            {
                oldLoc.CurrentItemId = string.Empty;
                await LocationRepository.UpdateAsync(oldLoc);
            }
        }

        Location? newLoc = await LocationRepository.GetByIdAsync(newLocationId);
        if (newLoc != null)
        {
            newLoc.CurrentItemId = item.Id;
            await LocationRepository.UpdateAsync(newLoc);
            item.LocationId = newLocationId;
            StateHasChanged();
        }
    }
}
@page "/production/cassettes"
@using MudBlazor
@using MudBlazor.Components
@using Nexus.Core.Domain.Models.Locations.Interfaces
@using Nexus.Core.Domain.Models.Transports
@using Nexus.Core.Domain.Models.Transports.Interfaces
@using Nexus.Core.Domain.Models.Locations
@using Nexus.Core.Domain.Models.Locations.Services
@inject ITransportRepository TransportRepository

<MudPaper Class="pa-4">

    <MudGrid>
        <MudItem xs="6">
            <MudDataGrid 
                T="Cassette"
                Class="text-caption"
                Items="_cassettes"
                Dense="true"
                Hover="true"
                Bordered="true"
                Striped="true"
                Filterable="true"
                SortMode="SortMode.Multiple"
                MultiSelection="true"
                QuickFilter="@QuickCassetteFilter"
                Hideable="true"        
                SelectedItemsChanged="OnSelectedCassettesChanged">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Cassettes</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchCassetteString"
                                  Placeholder="Search..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mx-2" />
                </ToolBarContent>

                <Columns>
                    <SelectColumn T="Cassette" />
                    <PropertyColumn Property="x => x.Id" Title="Id" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                </Columns>

                <PagerContent>
                    <MudDataGridPager />
                </PagerContent>
            </MudDataGrid>
        </MudItem>

        <!-- Right: Tray Grid -->
        <MudItem xs="6">
            <MudDataGrid 
                T="Tray"
                Class="text-caption"
                Items="_trays"
                Dense="true"
                Hover="true"
                Bordered="true"
                Striped="true"
                Filterable="true"
                SelectedItemsChanged="@OnSelectedTraysChanged"
                SortMode="SortMode.Multiple">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Trays</MudText>
                  
                </ToolBarContent>

                <Columns>
                    <SelectColumn T="Tray" />
                    <PropertyColumn Property="x => x.Id" Title="Id" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                   
                </Columns>

                <PagerContent>
                    <MudDataGridPager />
                </PagerContent>
            </MudDataGrid>
        </MudItem>
    </MudGrid>

    <MudDataGrid T="Memory"
                 Items="_memories"
                 Dense="true"
                 Hover="true"
                 Bordered="true"
                 Striped="true"
                 Filterable="true"
                 SortMode="SortMode.Multiple">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Memories</MudText>
        
        </ToolBarContent>

        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Id" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.DeviceId" Title="Device Id" />
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
</MudPaper>



@code {
    private List<Cassette> _cassettes = new();
    private List<Cassette> _selectedCassettes = new();
    private List<Tray> _trays = new();
    private List<Memory> _memories = new();
    private string _searchCassetteString = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _cassettes.Clear();

            var cassettes = await TransportRepository.GetCassettesWithoutTraysAsync();

            _cassettes.AddRange(cassettes);

            StateHasChanged();
        }
    }

    private Func<Cassette, bool> QuickCassetteFilter
    {
        get
        {
            return c =>
            {
                if (string.IsNullOrWhiteSpace(_searchCassetteString))
                    return true;

                if (c.Id.Contains(_searchCassetteString, StringComparison.OrdinalIgnoreCase))
                    return true;

                if (c.Name.Contains(_searchCassetteString, StringComparison.OrdinalIgnoreCase))
                    return true;

                return false;
            };
        }
    }

    private async void OnSelectedCassettesChanged(HashSet<Cassette> selected)
    {
        _trays.Clear();

        foreach(var cassette in selected)
        {
            var trays = await TransportRepository.GetTraysWithoutMemoriesAsync(cassette.Id);
            _trays.AddRange(trays);
        }
        StateHasChanged();
    }

    private async void OnSelectedTraysChanged(HashSet<Tray> selected)
    {
        _memories.Clear();

        foreach (var tray in selected)
        {
            var memories = await TransportRepository.GetMemoriesAsync(tray.Id);
            _memories.AddRange(memories);
        }
        StateHasChanged();
    }
}
